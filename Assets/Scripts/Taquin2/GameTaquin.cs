//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
namespace AssemblyCSharp
{
    public class GameTaquin : MonoBehaviour
    {

        enum State { Rest, Pressed, Selected, PressedSelected }
        State state;
        public Tile[] board;
        private Tile[,] matrix;
        public int height;
        public int width;

        private Tile currentTile;
        private Tile selectedTile;

        void Start()
        {
            state = State.Rest;
            StartCoroutine(initMatrix());
        }

        IEnumerator initMatrix()
        {
            int i;
            matrix = new Tile[height, width];
            yield return new WaitForSeconds(1);
            for (i = 0; i < board.Length; i++)
            {
                board[i].line = i / width;
                board[i].column = i % width;
                matrix[i / width, i % width] = board[i];
            }
            yield return new WaitForSeconds(1);
            StartCoroutine(mixGame());
        }

        IEnumerator mixGame()
        {
            int i, numberOfSwaps = 100;
            Vector2 coordinates = new Vector2(0, width - 1);
            for (i = 0; i < numberOfSwaps; i++)
            {
                yield return new WaitForSeconds(0.05f);
                coordinates=swapRandomTiles(coordinates);
            }
        }

        private Vector2 swapRandomTiles(Vector2 coordinates)
        {
            int i;
            float lineOrColumn = UnityEngine.Random.Range(0, 2);
            if (lineOrColumn > 0.5f)
            {
                i = delta((int)coordinates.x);
                swapTiles(matrix[(int)coordinates.x, (int)coordinates.y], matrix[(int)coordinates.x + i, (int)coordinates.y]);
                coordinates.x = coordinates.x + i;
            }
            if (lineOrColumn <= 0.5f)
            {
                i = delta((int)coordinates.y);
                swapTiles(matrix[(int)coordinates.x, (int)coordinates.y], matrix[(int)coordinates.x, (int)coordinates.y + i]);
                coordinates.y = coordinates.y + i;
            }
            return coordinates;
        }

        private int delta(int value)
        {
            int delta;
            if (value == 0)
                delta = 1;
            else if (value == width - 1)
                delta = -1;
            else
            {
                int rand = UnityEngine.Random.Range(0, 2);
                if (rand <= 0.5f)
                    delta = -1;
                else delta = 1;
            }
            return delta;
        }


        public bool swapTiles(Tile Origin, Tile Arrival)
        {
            int line = Origin.line;
            int column = Origin.column;
            Origin.line = Arrival.line;
            Origin.column = Arrival.column;
            Arrival.line = line;
            Arrival.column = column;

            matrix[Arrival.line, Arrival.column] = Arrival;
            matrix[Origin.line, Origin.column] = Origin;
            return true;
        }

        public void PressedOnTile(Tile sender, EventArgs e)
        {
            //Debug.Log("Pressed :" + state + " " + sender.toString());
            switch (state)
            {
                case State.Rest:
                    state = State.Pressed;
                    currentTile = sender;
                    break;
                case State.Pressed:
                    //Impossible
                    break;
                case State.Selected:
                    state = State.PressedSelected;
                    currentTile = sender;
                    break;
                case State.PressedSelected:
                    //Impossible
                    break;
            }
        }

        public void ReleasedOnTile(Tile sender, EventArgs e)
        {
            //Debug.Log("Released :" + state + " " + sender.toString());
            switch (state)
            {
                case State.Rest:
                    //Impossible
                    break;
                case State.Pressed:
                    if (currentTile.equals(sender))
                    {
                        state = State.Selected;
                        currentTile = null;
                        selectedTile = sender;
                    }
                    else
                    {
                        state = State.Rest;
                        swapTiles(currentTile, sender);
                        currentTile = null;
                    }
                    break;
                case State.Selected:
                    //Impossible
                    break;
                case State.PressedSelected:
                    state = State.Rest;
                    swapTiles(selectedTile, currentTile);
                    break;
            }
        }
    }
}

